name: Release

on:
  push:
    tags:
      - 'release/*'

permissions:
  contents: write

jobs:
  build-zips:
    name: Build per-locale ZIPs
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        # keep in sync with pr.yml / push.yml
        lang: [en, de, es, fr, it, nl]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Set build variables (from tag)
        id: buildvars
        shell: bash
        run: |
          GIT_TAG="${GITHUB_REF_NAME}"
          GIT_VER="${GIT_TAG#release/}"
          if [[ $GIT_VER =~ ^[0-9]+\.[0-9]+\.[0-9]+-[A-Za-z0-9]+$ ]]; then
            GH_TYPE='Release Candidate'
          else
            GH_TYPE='Release'
          fi
          echo "GIT_VER=$GIT_VER" >> $GITHUB_ENV
          echo "GIT_TAG=$GIT_TAG" >> $GITHUB_ENV
          echo "GH_TYPE=$GH_TYPE" >> $GITHUB_ENV

      - name: Build merged i18n JSON (${{ matrix.lang }})
        run: python bin/i18n/build-single-json.py --only '${{ matrix.lang }}'

      - name: Stage files for this locale
        shell: bash
        run: |
          STAGE="build/${{ matrix.lang }}/scripts"
          mkdir -p "$STAGE"
          rsync -a scripts/ "$STAGE"/
          echo "STAGE=$STAGE" >> $GITHUB_ENV

      - name: Resolve i18n tags (locale=${{ matrix.lang }})
        run: |
          python .vscode/scripts/resolve_i18n_tags.py \
            --json "${{ env.STAGE }}/rfsuite/i18n/${{ matrix.lang }}.json" \
            --root "${{ env.STAGE }}"

      - name: Copy sound pack (locale=${{ matrix.lang }})
        shell: bash
        run: |
          SRC="bin/sound-generator/soundpack/${{ matrix.lang }}"
          if [ ! -d "$SRC" ]; then
            echo "[AUDIO] $SRC not found; falling back to bin/sound-generator/soundpack/en"
            SRC="bin/sound-generator/soundpack/en"
          fi
          DEST="${{ env.STAGE }}/rfsuite/audio/${{ matrix.lang }}"
          rm -rf "$DEST"
          mkdir -p "$DEST"
          cp -a "$SRC/." "$DEST/"
          echo "[AUDIO] Copied $SRC -> $DEST"

      - name: Update version and config in staged main.lua
        shell: bash
        run: |
          sed -E -i 's/(version[[:space:]]*=[[:space:]]*\{[^}]*suffix[[:space:]]*=[[:space:]]*")[^"]*(")/\1'${{ env.GIT_VER }}'\2/' "${{ env.STAGE }}/rfsuite/main.lua"
          grep 'config\.' "${{ env.STAGE }}/rfsuite/main.lua" || true

      - name: Create release ZIP (locale=${{ matrix.lang }})
        shell: bash
        run: |
          ART="rotorflight-lua-ethos-suite-${{ env.GIT_VER }}-${{ matrix.lang }}.zip"
          (cd "build/${{ matrix.lang }}" && zip -q -r -9 "../$ART" scripts)
          mv "build/${{ matrix.lang }}/../$ART" .
          echo "ARTIFACT=$ART" >> $GITHUB_ENV

      - name: Upload per-locale artifact
        uses: actions/upload-artifact@v4
        with:
          name: rotorflight-lua-ethos-suite-${{ env.GIT_VER }}-${{ matrix.lang }}
          path: ${{ env.ARTIFACT }}
          if-no-files-found: error

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [build-zips]
    steps:
      - name: Checkout repo (for release notes script)
        uses: actions/checkout@v4

      - name: Set build variables (from tag)
        id: buildvars
        shell: bash
        run: |
          GIT_TAG="${GITHUB_REF_NAME}"
          GIT_VER="${GIT_TAG#release/}"
          if [[ $GIT_VER =~ ^[0-9]+\.[0-9]+\.[0-9]+-[A-Za-z0-9]+$ ]]; then
            GH_TYPE='Release Candidate'
          else
            GH_TYPE='Release'
          fi
          echo "GIT_VER=$GIT_VER" >> $GITHUB_ENV
          echo "GIT_TAG=$GIT_TAG" >> $GITHUB_ENV
          echo "GH_TYPE=$GH_TYPE" >> $GITHUB_ENV

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./dist
          merge-multiple: true

      - name: List artifacts
        run: ls -la ./dist

      - name: Create release notes
        run: |
          python .github/scripts/extract-release-notes.py "${{ env.GIT_VER }}" Releases.md > Notes.md
          sed -n '1,200p' Notes.md

      - name: Create Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: bash
        run: |
          cd dist
          gh release create "${{ env.GIT_TAG }}" --notes-file ../Notes.md -t "Rotorflight Lua Ethos Suite - ${{ env.GH_TYPE }} ${{ env.GIT_VER }}" *.zip
